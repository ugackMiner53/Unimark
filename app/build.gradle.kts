/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.4/userguide/building_java_projects.html in the Gradle documentation.
 */

import java.net.URI
import java.net.http.HttpClient
import java.net.http.HttpRequest
import java.net.http.HttpResponse

import groovy.json.JsonSlurper
import groovy.json.JsonOutput

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation("org.junit.jupiter:junit-jupiter:5.9.3")

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    // implementation("com.google.guava:guava:32.1.1-jre")
    implementation("com.github.kwhat:jnativehook:2.2.2")
    implementation("com.squareup.moshi:moshi:1.14.0")
    
    // implementation("com.dorkbox:SystemTray:4.4")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

application {
    // Define the main class for the application.
    mainClass.set("com.ugackminer.unimark.App")

    if (!File(sourceSets.main.get().getResources().getSrcDirs().iterator().next().getPath() + "/shortcodes.json").exists()) {
        println("shortcodes.json does not exist!\nDownloading from emojibase...")
        updateShortcodes()
    }
}

tasks.withType<Jar> {
    manifest {
        attributes["Main-Class"] = "com.ugackminer.unimark.App"
    }
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

fun updateShortcodes() {
    val resourcesDir = sourceSets.main.get().getResources().getSrcDirs().iterator().next()
    val sourceUrl = "https://raw.githubusercontent.com/milesj/emojibase/master/packages/data/en/shortcodes/emojibase.raw.json"

    val client = HttpClient.newBuilder().build();
    val request = HttpRequest.newBuilder().uri(URI.create(sourceUrl)).build();
        
    val response = client.send(request, HttpResponse.BodyHandlers.ofString());

    val shortcodes = JsonSlurper().parseText(response.body()) as Map<String, Any>
    val reversedShortcodes = mutableMapOf<String, String>()

    shortcodes.forEach { (key, value) ->
        if (value is ArrayList<*>) {
            for (singleValue in value) {
                reversedShortcodes[singleValue as String] = key
            }
        } else {
            reversedShortcodes[value as String] = key
        }
    }

    val reversedShortcodesJson = JsonOutput.prettyPrint(JsonOutput.toJson(reversedShortcodes))

    File(resourcesDir.getPath() + "/shortcodes.json").writeText(reversedShortcodesJson)
}

tasks.register("updateShortcodes"){
    doLast {
        updateShortcodes()
    }
}